function getConnector(e,n){Interface.ensureImplements(e,absConnector),this.myConnector=e}var interface=require("./interface.js"),baseConn=require("./baseConnector.js"),abstractConnector=new interface.Interface("AbstractConnector",["connect","disconnect","create","update","delete","getNextSeq","find","loadAutoParams","saveAutoParams","loadAutoTable","getParameter","saveParameter","findAndUpdate"]);SqlConnector=function(e,n){var o,t,s,r,i;o=t=s=r=i={a:"A"},this.mongoose=n,this.server=e,o=this.mongoose.Schema,t=new o({_id:String,seq:Number}),s=new o({__SessionId:{type:Number,index:1,required:!0},key:{type:String,required:!0},subKey:{type:String},rowId:{type:Number},value:{type:String}}),r=this.mongoose.model("counters",t),i=this.mongoose.model("sessionparameters",s),this.connector=this,MongoConnector.superclass.connector=this,this.mongoose.connection.on("error",function(n){console.error("Failed to connect to DB "+e+" on startup ",n)}),this.mongoose.connection.on("disconnected",function(){console.log("Mongoose default connection to DB :"+e+" disconnected")});var a=function(){var n=require("mongoose");n.connection.close(function(){console.log("Mongoose default connection with DB :"+e+" is disconnected through app termination"),process.exit(0)})};process.on("SIGINT",a).on("SIGTERM",a),interface.Interface.ensureImplements(this,abstractConnector),this.getSessionParameterTable=function(){return i},this.getCounters=function(){return r}},interface.extend(SqlConnector,baseConn.BaseConnector),SqlConnector.prototype={connect:function(){console.log("Connecting to Server: "+this.server),this.mongoose.connect(this.server)},disconnect:function(){this.mongoose.disconnect()},create:function(e,n,o){var t=new e(n);t.save(o)},updateDefault:function(e,n,o,t){var s=e.getSessionParameterTable().update(n,o);s.setOptions({upsert:!0,multi:!0}),s.exec(t)},update:function(e,n,o,t,s){if(arguments.length<=3)MongoConnector.prototype.updateDefault(this,arguments[0],arguments[1],arguments[2]);else{var r=this.mongoose.model(e);if(console.log("connection:update:0:"+JSON.stringify(n)+"upd"+JSON.stringify(o)),t){var n=r.update(n,o);n.setOptions({upsert:!0,multi:!0}),n.exec(s)}else{var n=r.findOne(n);n.exec(function(e,t){if(e)throw e;n=t.update(o),n.exec(s)})}}},findAndUpdate:function(e,n,o,t,s){var r=this.mongoose.model(e);if(console.log("connection:update:0:"+JSON.stringify(n)+"upd"+JSON.stringify(o)),t){var n=r.findOneAndUpdate(n,o,{new:!0,upsert:!0,multi:!0});n.exec(s)}else{var n=r.findOneAndUpdate(n,o,{new:!0,upsert:!0});n.exec(s)}},delete:function(e,n,o,t){var s=this.mongoose.model(e);if(o){var n=s.remove(n);n.exec(t)}else{var n=s.findOne(n);n.exec(function(e,o){if(e)throw e;n=o.remove(t)})}},findSessionParam:function(e,n,o){console.log("findSessionparam: "+JSON.stringify(n)),e.getSessionParameterTable().find(n,o)},findDefault:function(e,n,o){e.getSessionParameterTable().find(n,o)},find:function(e,n,o,t){if(arguments.length<=3)return void MongoConnector.prototype.findDefault(arguments[0],arguments[1],arguments[2]);var s=this.mongoose.model(e);o?(console.log("inside query::"+JSON.stringify(n)),s.find(n,t)):s.findOne(n,t)},getNextSeq:function(e,n){this.getCounters().findOneAndUpdate({_id:e},{$inc:{seq:1}},{upsert:!0,new:!0},n)},loadAutoParams:function(){MongoConnector.superclass.loadAutoParams.apply(this,arguments)},saveAutoParams:function(){MongoConnector.superclass.saveAutoParams.apply(this,arguments)},loadAutoTable:function(){MongoConnector.superclass.loadAutoTable.apply(this,arguments)},saveAutoTable:function(){MongoConnector.superclass.saveAutoTable.apply(this,arguments)},getParameter:function(){MongoConnector.superclass.getParameter.apply(this,arguments)},saveParameter:function(){MongoConnector.superclass.saveParameter.apply(this,arguments)}},exports.MongoDBConnector=MongoConnector;